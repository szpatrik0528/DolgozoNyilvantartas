using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Dolgozoi_nyilvantartas;
//
//    var dolgozo = Dolgozo.FromJson(jsonString);

namespace Dolgozoi_nyilvantartas
{


    public partial class Dolgozo
    {
        [JsonProperty("id")]
        public long DolgozoId { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string DolgozoName { get; set; }

        [JsonProperty("salary", NullValueHandling = NullValueHandling.Ignore)]
        public long? DolgozoSalary { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public string DolgozoPosition { get; set; }

        [JsonProperty("Id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("Name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("Salary", NullValueHandling = NullValueHandling.Ignore)]
        public long? Salary { get; set; }

        [JsonProperty("Position", NullValueHandling = NullValueHandling.Ignore)]
        public string Position { get; set; }

    }

    public partial class Dolgozo
    {
        public static List<Dolgozo> FromJson(string json) => JsonConvert.DeserializeObject<List<Dolgozo>>(json, Dolgozoi_nyilvantartas.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Dolgozo> self) => JsonConvert.SerializeObject(self, Dolgozoi_nyilvantartas.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
